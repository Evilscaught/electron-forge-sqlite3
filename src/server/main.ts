import { app, BrowserWindow, net, session,  ipcMain, IpcMainInvokeEvent} from 'electron';
import * as path from 'path';
import electronSquirrelStartup from 'electron-squirrel-startup';
import cars from './sequelizer/routes/cars';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WEBPACK_ENTRY: string;
declare const MAIN_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (electronSquirrelStartup) {
  app.quit();
}

ipcMain.handle('default', (_: IpcMainInvokeEvent, args) => {
  const { route, method } = args;
  const invalidMethod = (route: string, method: string) => ({ success: false, message: `Method '${method}()' does not exist for route ${route}` });

  switch (route)  {/* Reads and returns file data */
    case 'cars':
      if (method in cars) return (cars)['getCar']();
      else return invalidMethod(route, method);
    default:
      return { success: false, message: 'No such route' };
  }
});

ipcMain.on('ipc-example', (event, arg) => {
  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;
  console.log(msgTemplate(arg));
  event.reply('ipc-example', msgTemplate('pong'));
});

const createWindow = (): void => {
  process.env.ELECTRON_ENABLE_SECURITY_WARNINGS = 'true';

  // Create the browser window.
  const primaryWindow = new BrowserWindow({
    height: 1024,
    width: 728,
    webPreferences: {
      preload: MAIN_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: true
    },
  });

  // and load the index.html of the app.
  primaryWindow.loadURL(MAIN_WEBPACK_ENTRY);

  // Open the DevTools.
  primaryWindow.webContents.openDevTools();

  primaryWindow.on('closed', () => {
    primaryWindow.destroy();
  });

  session.defaultSession.protocol.handle('assets', (request) => {
    const filePath = request.url.slice('assets://'.length);
    // const filePath = path.join(app.getAppPath(), '.webpack/renderer', fileURL);
    const fullPath = path.join(__dirname, 'assets', filePath);

    return net.fetch(`file://${fullPath}`);
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
